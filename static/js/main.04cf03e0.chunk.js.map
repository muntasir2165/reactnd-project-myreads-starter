{"version":3,"sources":["BooksAPI.js","Book.js","BookShelf.js","ListBooks.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","props","booksOnShelf","updateBookShelf","idx","length","currentBook","hasOwnProperty","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","event","target","value","disabled","title","authors","Array","isArray","join","BookShelf","map","key","src_Book","ListBooks","onBookAdd","currentlyReadingBooks","filter","wantToReadBooks","readBooks","src_BookShelf","onClick","SearchBooks","state","searchTerm","searchBookResults","updateSearchTerm","_this","setState","BooksAPI","toConsumableArray","catch","err","console","log","_this2","this","_this$state","_this$props","onBackButtonPress","type","placeholder","trim","Component","BooksApp","getAllBooks","react_router","exact","path","render","_ref","history","src_ListBooks","push","_ref2","src_SearchBooks","React","ReactDOM","react_router_dom","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.04cf03e0.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Book = props => {\n  const { book, booksOnShelf, updateBookShelf } = props;\n\n  // The following logic applies for rendering books from the SearchBooks component\n  // such that the books in the search result listing that already exist in the\n  // bookshelf will be provided with the shelf attribute specifying their current\n  // place in the shelf and the appropriate option from the select tag will be selected\n  if (booksOnShelf) {\n    for (let idx = 0; idx < booksOnShelf.length; idx++) {\n      const currentBook = booksOnShelf[idx];\n      if (currentBook.id === book.id && !book.hasOwnProperty(\"shelf\")) {\n        book.shelf = currentBook.shelf;\n        break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div\n          className=\"book-cover\"\n          style={{\n            width: 128,\n            height: 193,\n            backgroundImage: `url(${book &&\n              book.imageLinks &&\n              book.imageLinks.thumbnail})`\n          }}\n        />\n        <div className=\"book-shelf-changer\">\n          <select\n            onChange={event => updateBookShelf(book, event.target.value)}\n            value={book.hasOwnProperty(\"shelf\") ? book.shelf : \"none\"}\n          >\n            <option value=\"move\" disabled>\n              Move to...\n            </option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors && Array.isArray(book.authors) && book.authors.join(\", \")}\n      </div>\n    </div>\n  );\n};\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  booksOnShelf: PropTypes.array,\n  updateBookShelf: PropTypes.func.isRequired\n};\n\nexport default Book;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\n\nconst BookShelf = props => {\n  const { title, books, updateBookShelf } = props;\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">{title}</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {books.map(book => (\n            <li key={book.id}>\n              <Book book={book} updateBookShelf={updateBookShelf} />\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nBookShelf.propTypes = {\n  title: PropTypes.string.isRequired,\n  books: PropTypes.array.isRequired,\n  updateBookShelf: PropTypes.func.isRequired\n};\n\nexport default BookShelf;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BookShelf from \"./BookShelf\";\n\nconst ListBooks = props => {\n  const { booksOnShelf, updateBookShelf, onBookAdd } = props;\n\n  const currentlyReadingBooks = booksOnShelf.filter(\n    book => book.shelf === \"currentlyReading\"\n  );\n  const wantToReadBooks = booksOnShelf.filter(\n    book => book.shelf === \"wantToRead\"\n  );\n  const readBooks = booksOnShelf.filter(book => book.shelf === \"read\");\n\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          <BookShelf\n            title=\"Currently Reading\"\n            books={currentlyReadingBooks}\n            updateBookShelf={updateBookShelf}\n          />\n          <BookShelf\n            title=\"Want to Read\"\n            books={wantToReadBooks}\n            updateBookShelf={updateBookShelf}\n          />\n          <BookShelf\n            title=\"Read\"\n            books={readBooks}\n            updateBookShelf={updateBookShelf}\n          />\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <button onClick={() => onBookAdd()}>Add a book</button>\n      </div>\n    </div>\n  );\n};\n\nListBooks.propTypes = {\n  booksOnShelf: PropTypes.array.isRequired,\n  updateBookShelf: PropTypes.func.isRequired,\n  onBookAdd: PropTypes.func.isRequired\n};\n\nexport default ListBooks;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Book from \"./Book\";\n\nclass SearchBooks extends Component {\n  state = {\n    searchTerm: \"\",\n    searchBookResults: []\n  };\n\n  updateSearchTerm = searchTerm => {\n    this.setState(() => ({\n      searchTerm: searchTerm,\n      searchBookResults: []\n    }));\n    searchTerm !== \"\" &&\n      BooksAPI.search(searchTerm)\n        .then(books => {\n          if (Array.isArray(books)) {\n            this.setState(() => ({\n              searchBookResults: [...books]\n            }));\n          }\n        })\n        .catch(err => console.log(\"error: \" + err));\n  };\n\n  render() {\n    const { searchTerm, searchBookResults } = this.state;\n    const { booksOnShelf, updateBookShelf, onBackButtonPress } = this.props;\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <button className=\"close-search\" onClick={() => onBackButtonPress()}>\n            Close\n          </button>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={searchTerm}\n              onChange={event =>\n                this.updateSearchTerm(event.target.value.trim())\n              }\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {searchBookResults.map(book => (\n              <li key={book.id}>\n                <Book\n                  booksOnShelf={booksOnShelf}\n                  book={book}\n                  updateBookShelf={updateBookShelf}\n                />\n              </li>\n            ))}{\" \"}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearchBooks.propTypes = {\n  booksOnShelf: PropTypes.array.isRequired,\n  updateBookShelf: PropTypes.func.isRequired,\n  onBackButtonPress: PropTypes.func.isRequired\n};\n\nexport default SearchBooks;\n","import React from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport ListBooks from \"./ListBooks\";\nimport SearchBooks from \"./SearchBooks\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nclass BooksApp extends React.Component {\n  state = {\n    books: []\n  };\n\n  componentDidMount() {\n    this.getAllBooks();\n  }\n\n  getAllBooks = () => {\n    BooksAPI.getAll().then(books => {\n      this.setState(() => ({\n        books\n      }));\n    });\n  };\n\n  updateBookShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(res => {\n      this.getAllBooks();\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route\n          exact\n          path=\"/\"\n          render={({ history }) => (\n            <ListBooks\n              booksOnShelf={this.state.books}\n              updateBookShelf={this.updateBookShelf}\n              onBookAdd={() => {\n                history.push(\"/search\");\n              }}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/search\"\n          render={({ history }) => (\n            <SearchBooks\n              booksOnShelf={this.state.books}\n              updateBookShelf={this.updateBookShelf}\n              onBackButtonPress={() => {\n                history.push(\"/\");\n              }}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}